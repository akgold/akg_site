{
  "articles": [
    {
      "path": "about.html",
      "title": "Alex K Gold Site",
      "description": "It me.\n",
      "author": [],
      "contents": "\nAlex K Gold is a Solutions Engineer at RStudio. He lives in Silver Spring, MD.\nBefore coming to RStudio, Alex was a data scientist working on economic policy research, political campaigns, and healthcare. He is a proud economics PhD dropout.\nWhen not data nerd-ing, Alex loves spending time with his wife, doing handstands, and cooking.\n\n\n\n",
      "last_modified": "2022-01-03T21:58:47+00:00"
    },
    {
      "path": "index.html",
      "title": "Mostly #rstats and leadership, sometimes politics and handstands",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-01-03T21:58:47+00:00"
    },
    {
      "path": "mfy.html",
      "title": "Managing the First Year",
      "description": "Thoughts on being a new data science manager.",
      "author": [],
      "contents": "\nI first became a manager by surprise.\nDuring my first week at a consulting firm supporting a large federal client, my manager was out, so I spent the week getting to know 3 other analysts and data scientists on the team. I was excited to join as the team’s most senior data scientist and to get my hands dirty.\nIt was during my second week that I understood that no, I’d been hired to replace her as the team’s manager.\nFor the next 18 months I stayed in that role, directly managing a team of 4-8 data scientists. That time was a firehose of learning – some lessons I had sought out, and others than landed on my head without invitation. I bought many books on management and implemented some of the nuggets I found in those thousands of pages.\nBut I learned even more from some of the big, stupid, mistakes I made – including one that literally interrupted my honeymoon on the beaches of Croatia.\nAfter that role, I moved back into an individual contributor role on the Solutions Engineering team at RStudio. Around the time I changed jobs, I started this writing project.\nI’m not a management expert, but I did try really hard during my first year managing, and I’ve since spent time digesting the experience. My hope is that others will find a few of the things I learned useful when they’re at the start of their own management journey.\nManaging the first year\nWhen I first understood that I was to manage this team, I knew it would be very different from doing data science, demanding new kinds of work and new skills of me. But I didn’t know how to do it yet, and to be honest, I didn’t really know what management was.\nThe next 18 months were an incredible challenge. Even with the overwhelming amount I had to learn when I first started as a Solutions Engineer at RStudio, it felt like vacation after the daily emotional reaching management had required of me.\nAs I started, I really didn’t have a clear idea of what management was. I’d had a few good managers over the years (and more bad ones), but didn’t really understand why the good ones had been good and the bad ones bad.\nSo I did what I do best — I turned to books. I read management books, biographies of managers, deep dives on companies that seemed to have figured something great out.\nRecommendations on my favorites at the bottom.\nMost of those books were bad (or at least over-long by half), but some were good. I developed a reasonably coherent mental model of what managing is.\nAnd yet – I found myself on my honeymoon in Split, Croatia, known for its old-world charm and stunning azure waters. My new wife and I were staying in a single-room flat so humorously small that the bathroom was just a glass-enclosed corner of the room, privacy provided solely gauzy purple curtain.\nBut I was crouched in the dark stairwell listening to voicemails and reading emails.\nWe had delivered charts to a client during my honeymoon. Charts that included impossible data values, labels that made no sense, and misclassified of data points. The mistakes reflected that we, the supposed data experts, had no idea what the data was – much less any cogent interpretation.\nClearly I had goofed – the person who had created the charts didn’t have the context and knowledge necessary to produce the charts without error.\nAnd then things got worse after I got home and instituted drastic new requirements for everyone’s code to be checked in and reviewed daily. Many on the team chafed under the sudden new requirements, and a few weeks after that, I found myself in a number of difficult conversations about how we might lose people on the team, all due to my actions.\nBut the team recovered. Over the remainder of my time there, the team more-than-doubled in size, and by the time I left for RStudio, I believe it was a reasonably highly-functional data and analytics team.\nAnd I loved it.\nFor some skilled individual contributors, management can seem like an unattractive place to be. An endless flatland of meeting after meeting – and none of the creative challenge of IC work. That was not my experience.\nWhile I enjoyed getting things done on my own, it paled in comparison to the joy of watching my team succeed. And I found management to be incredibly creative – dreaming up how to structure our team and our work processes required as much ingenuity as anything I’d done as a data scientist.\nSo, I hope you’ll get some helpful mental models out of this essay – but even the best mental models are only modest protection against ending up in a dark stairway, listening the seagulls, wishing you’d never even heard of line plots or line management.\nMy definition of management\nAside from the feel-goody-ness of management, I’ve found management most exciting as a form of leverage. I could only ever type so many lines of code in a day, fit so many models, deploy so many apps. Management was a way to scale myself.\nAs best I can explain it:\n\nGood management is a flywheel generator — it gives the team clarity and helps them feel safe to to experiment and grow.\n\nReading this clever and finely-worded definition fills me with the warm glow of a concept well-encapsulated. But let’s be honest, you — reader — are reading in hopes of being a better manager, or maybe even more likely, understanding why your manager is so bad.\nThe philosophers have only interpreted the world, in various ways. The point, however, is to change it.\n- Karl Marx, Eleven Theses on Feuerbach\nIf you’re looking to change the circumstances of your management or managing, this definition is maddeningly vague.\nWhen I started in on all those management books, I figured management would be like other things I had done in my professional life. When I wanted to do machine learning, I’d read some books and then used machine learning techniques on some data.\nBut it turned out management didn’t work like that. It turned out management was a craft.\nAnd like any craft, some theory was helpful, but the hard part was putting that theory into practice.\nManagement was hard\nUnlike data science, where a skills gap could be rectified by learning more, getting better at management required conquering things much deeper than not knowing enough about particular machine learning techniques.\nAs a manager, I constantly found myself constantly bumping up against the limits of my own bravery and patience.\nStay awkward, brave, and kind.\n-Brené Brown\n\nMostly for worse – but some for better – my commute to this job was quite lengthy, and I listened to this episode of the excellent Start Up Podcast in which someone says the line, “organizations magnify the worst traits of their leaders”. I have seen nothing that makes me think this is anything less than 100% true.\nSo my only piece of truly directive advice for any new managers reading this book:\n\nGo do therapy/counseling.\n\nWe all have traits and quirks that are maladaptive in a management role. Therapy won’t fix them, but it certainly helped me be more aware of my tendencies and patterns, more able to step outside and observe them, and (I hope) reduced the likelihood I unwittingly perpetuated them on my team.\nWhen I came back from my honeymoon, I thought I knew what had gone wrong. The code and the plots weren’t good enough, and my review could catch it in the future. So I decided that all code the team wrote would be checked into git every night and I would review it.\nThis was a dumb rule – for many reasons.\nThe simplest reason it was dumb was that I’d neglected my first role as a manager – to make the team work well. The people on my team were smart, so this mistake wasn’t an issue of intelligence. Instead, I hadn’t shared enough context about the particular interpretation what these plots were or what the values meant so they could be intelligible.\nShortly after this incident got resolved, I adopted the maxim always provide more context. I found that every minute I put into providing context around why something was happening was paid back in spades later on. My team was made up of really motivated, really smart people, so once they had the necessary context, it was easy for them to spot mistakes or find improvements that made sense.\nIt was fine once resolved, but for a few weeks after the imposition of my new rules, I found myself in the midst of a howling maelstrom. People were not listening to the new rules, they weren’t doing their work, and they were even threatening to leave for another project.\nFor a while, I couldn’t figure out why the response had been so extreme. Sure, my rules were maybe silly, but the response seemed very intense.\nIt gradually dawned on my that I had explicit responsibility for the daily work and careers of the people on my team. People’s work matters to them. It bumps up against the deepest questions they ask themselves about their value and worthiness.\nAnd as a manager, I was suddenly bumping up against these feelings and questions on a daily basis.\nMeanwhile, I was having to manage my own fears and insecurities. I watched my team doing fantastic technical work while I perceived the atrophy of my own technical skills. For me, the challenge was avoiding slipping into defensiveness at that thought. To make it all harder – and I’ve read enough to believe this is true of all managers – I got shockingly little feedback on how I was doing.1\nIt took me a while to understand how much my stupid rule had disrespected my team and struck at fears they held – and being disrespected and afraid always provokes extreme responses.\nMy new rules were infantilizing. They didn’t respect the professionalism of the people on my team. And for my team, mostly relatively recent college grads, the intimation that they’d gotten all the way through 16 years of school and still couldn’t do anything was a pretty extreme form of disrespect.\nMoreover, the new rules provoked the fear of being stupid or lacking. Most of my team wasn’t terribly comfortable with git – and git is a particularly fearful beast. I found it very hard to develop a reliable mental model, and I felt like I was always moments away from destroying all my work.2\nOnce I grasped that the main thing I was actually doing was providing context and managing feelings, things started going much smoother. Instead of walking into work every day thinking through some technical challenge or another, I tried to activate the best of my bravery and patience for the day ahead.\nManagement was just a bunch of roles smashed together\nNow please allow me to completely contradict myself.\nWhile most of the hardness of management was in bringing my best self to understand what my direct reports needed, one of the earliest barriers to getting better was that I didn’t understand what management was. I didn’t know what roles I was expected to inhabit or what the skills were that I needed to improve.\nThis section is about my mental model of what management is.\nCentral to my mental model of management is that it isn’t actually a role. Manager is a title applied to a constellation of roles that I found to be mostly distinct.\nOne of the reasons management is exhausting is the amount of context switching required. This felt like it was as much about switching the role I was playing from minute to minute as having a calendar packed full of meetings with different people on different topics.\nA manager’s output = The output of his organization + The output of the neighboring organizations under his influence.\n-Andy Grove, High Output Management\nIt felt to me like there were six roles to my job as a manager, starting from the most “manager-y”:\nAs a people manager, I learned what made my direct reports tick, identified their career aspirations, and pointed out opportunities for progress.\nAs a resource manager, I determined what resources we needed and acquired them. Mostly this meant recruiting, hiring, and onboarding, but it also meant advocating for money for training and team activities.\nAs a project manager, I collected and triaged projects and project requirements, set timetables and schedules, assigned tasks, and had the final say about when work was “done”.\nAs the team’s communications manager, I made sure the team’s work was being shared with the rest of the organization, and that everyone on the team knew what was going on outside.\nAs the process manager, I helped design the team’s processes to make sure we could identify, allot, do, and communicate work across the team.\nAs a technical mentor and coach, I was a technical expert who reviewed code, answered technical questions, and gave work feedback to my team.\nFor the most part, these roles felt pretty distinct from each other, and each of them was a meaningful part of my job.\nIn fact, in recognition of the fact I was working at a consulting firm where people frequently changed projects, my role was explicitly divided between my role as a people (“career”) manager and a “job lead” who managed a particular project and its resources. I actually really liked this division, as if gave my direct reports opportunities to acquire more mentors and mentorship.\nMy technical skills were relevant in many of these roles – but not in the way I had thought. For the most junior employees, my skills outmatched theirs, and I was able to explicitly teach them technical things. But more senior people on the team quickly matched or exceeded my skills.\nThe primary relationship between my data science skills and my skills as a data science manager was that my technical skills helped me ask the right questions. Ultimately, my direct reports succeeded and learned more when they were asked questions than given answers.\nMeetings were my main main tool\nMy first, and most obvious, observation about being a manager was that nothing I did was a solo activity. In the work world, any gathering of two or more people is a meeting. Thus, meetings were my main tool as a manager.\nMy meetings varied widely in both form and content. Many were 1-1 meetings between me and a direct report, others were team-wide update or decision-making meetings.\nPrimal disdain for meetings is pretty common in tech circles. I believe this is a toxic overreaction to cultures where meetings are all that happens or a result of environments (or people) that undervalue the importance of communication. I came to believe that meetings per se were not the problem.\nInstead, I came to believe meetings are bad when they:\nResult in calendar fragmentation.\nFeel useless to attendees.\nPreventing calendar fragmentation is a genuinely hard problem. Meetings tend to migrate to places where there are large open blocks of time on people’s calendars. There’s definitely no one-size-fits-all solution, but a focus-time-first orientation to making calendars can help. Aside from that, I found no great solutions here aside from trying to minimize the number of meetings and their size.\nThere have been so many books written on making meetings (feel) useful. Generally they present a system or tactic to make meetings (feel) useful. Amazon makes everyone read a memo before they start. Tim Ferris won’t show up if there isn’t an agenda ahead of time. 1-1s are supposed to be “the employee’s meeting” where they come with an agenda and get to do most of the talking. They’re fine rules.\nBut I think the focus on tactics often missed the point. Let’s take the example of 1-1 meetings with direct reports, which I found incredibly valuable – even fun!\nUp to the point I became a manager, I didn’t have great experiences with 1-1s. Most of my career didn’t feature formal 1-1s, and the one manager who adopted a real 1-1 playbook managed to make them quite negative even with a set format.\nSo I walked into management really confused about how to do good 1-1s, and deeply skeptical of prescriptive formats.\nMy skepticism about meeting formats was later deepened by my first manager at RStudio.\nI loved our 1-1s. Each one made me feel valued and seen and I left with clarity about my work, this despite (or because?) him breaking every 1-1 rule I’ve ever seen.\nI found it was important to make clear why we were there and actually focus on that why in the meeting. Sometimes the tactics from books were helpful…but it constantly varied meeting to meeting and I struggled to taxonomize the meetings or tactics.\nKeeping the focus on what we were there to do never went wrong.\nHaving meetings (or parts of meetings) for frivolous fun or to get to know each other is really important – doubly so for remote teams.\nThe one kind of meeting that is always bad is the group brainstorm with more than about 4 people. Groups that large don’t do good exploratory thinking. Skip them, write a memo ahead of time, and debate options at the meeting.3\nMy words carried a lot of power\nIt’s important to be aware of implicit sources of power in a workplace like identity-based privilege, technical knowledge, and tenure. Despite being pretty comfortable talking about power and privileged in my life, I was surprised by how much power was still embedded in the explicit management structure of the organization.\nI initially wanted to believe that nothing had changed because I was a manager – I could still be “one of the team”. But it quickly became obvious that my feedback – positive, negative, and even neutral – carried a weight it didn’t before.\nThis shouldn’t have been surprising. I’d had the experience of a manager who would frequently message “have a minute to talk?”. Every single time, my heart jumped into my throat, even though it was usually just to chat about something minor.\nAfter I observed myself doing the same, I tried to always explain why in the same message as a request to meet with a direct report.\nEven more complicated, I came to feel that the form and timing of my communication mattered, because they communicated about my work habits, which implicitly set expectations for others.\nI tried really hard not to send messages outside of work hours – and I made a big deal of visibly unplugging when I went on vacation. I felt those were important norms for our team, and the easiest way to upend them would’ve been to be seen not following them myself.\nAnother new thing was how often – and quickly – I had to give feedback.4 I quickly found that critical feedback, has a short half-life. The first few times I had critical feedback, I held onto it, figuring I’d deliver it at a more convenient time.\nBut if I’d waited a week, it felt petty to bust out, “Remember that presentation last week? You really should’ve proofread it before we showed a typo to the client.” And when it didn’t feel petty, I was worried it’d be blown out of proportion in my direct reports’ head because it had bothered me enough to hold onto for so long. I found the quicker I could give critical feedback, the better.\nI also found that speed was important for positive feedback.\nI don’t have a great anecdote from when I was managing, but a good friend of mine was getting very little feedback at her job. She didn’t really know if she was doing well, and didn’t feel like her role was valued in the organization – until the day she resigned.\nSuddenly, accolades were pouring in from leadership across the organization - all the way up to the organization’s head. She was told for the first time that the program she ran made a difference, and that her role was essential. She was personally lauded for the grace, professionalism, and strategic thinking she brought into every meeting.\nIt meant she left feeling good, but what an utter failure of management!\nSome challenges I could identify, but couldn’t solve\nAside from the many skills I had to learn and the day-to-day skills I had to develop, some of the roles I inhabited as a manager involved ongoing balancing challenges that I don’t think ever really end.\nI was stuck in-between\nOne of the strangest parts of being a first-level manager was how much I felt stuck between the organization above me and the people who worked for me.\nI believe my employer genuinely wanted to treat employees well. They were not trying to – as Jack so eloquently put it on 30 Rock – “squeeze the sweetest juice out of workers mind grapes.”\nEven so, I felt a tension between looking out for the company and looking out for my direct reports. In those cases, I generally found it easy to prioritize the people who worked for me. This was especially true since it was many of their first jobs and they hadn’t quite figured out how to advocate for themselves in a workplace.\nThis materialized in simple ways, like with the woman on my team who was a dual citizen. The complexities of having multiple passports and working on projects for the federal government meant she couldn’t visit her parents while she was on the project. It was easy for me to frequently ask whether that was still ok or whether we should start looking for another project.\nBut there were also other cases that were much harder – where there was a tension between my role as a mentor for particular members of my team and my responsibilities as team lead.\nFor example, someone on the team confidentially shared that she was considering another project that would give her more exposure to machine learning. From my perspective as her professional mentor, this was awesome - that was the work she really wanted to do!\nBut it was hard for me to keep this information confidential from my perspective as a team lead, because sitting on it meant less time to discuss what to do if she left, and more stress for the rest of the team down the road.\nMy sense is that exactly what you’re stuck between does change depending on the level of management…but I’m not sure this between-ness ever really resolves.\nResource management was particularly hard\nI despise the use of the term resource to describe a person on a team, like, “we’re going to need to add a resource in Q3” 🤮.\nBut the main resource I managed was the number of people we had and the roles they filled. I found it really hard to figure out the right number of people for our team.\nBefore, I basically just had to figure out how hard to work.\nAs a manager, I gained the mind-bending ability to add people and make more time. Simultaneously deciding how much work the team could take on and how many people we needed required solving an underdetermined system of equations.\nWith no clear right answer, I had to rely on my judgement about the importance of the marginal bit of work and how quickly we could add team members.\nAnd it wasn’t even that simple! Because I was a stuck-between manager, I couldn’t just decide to add more people or even to spend money on other things like a course or a team dinner – I had to convince several layers of management above me that we needed them.\nDeciding how hard to push – and when - and for what roles – is a challenge that I don’t think ever really ends.\nMentoring was different\nI knew I was a good data scientist with a particularly strong background in econometrics and statistics, and I had become a very proficient R programmer. I had done a lot of teaching, which I loved. I figured I had the mentoring part pf the job in the bag.\nYet again – wrong.\nIt turned out that I was good at teaching and instructing. I was good at clearly explaining technical topics, making them clear and approachable. That was useful.\nBut it turned out that an even bigger part of mentoring as a manager was coaching, rather than teaching. I had to help my direct reports develop an inspiring vision for their career – or at least for their involvement in the current project. It was a heady task – figuring out how to convey really high expectations for people without setting short term goals or deadlines that were unreasonable.\nMoreover, it was hard to figure out how to balance people’s need for development – which means slowing down and taking time to learn – with the need to just get stuff done in the quickest way possible. As a manager, it was my responsibility to figure out when we had to focus on efficiency and when there were good opportunities for learning.\nI loved management\nI’ve mostly written about how hard management was and how it defied my expectations.\nThat’s all true.\nBut it’s also the case that I loved my role as a manager. I experienced so much joy as I watched the connections between the people on my team got denser, and the team’s topology come to resemble a spiderweb much more so than a wagon wheel with me at the center.\nI found, curiously enough, that my joy at seeing what the team accomplished was inversely proportional to my involvement in it.\nNow, having been at RStudio almost 3 years and being back in management, I look back quite fondly on that hectic, intense, learning-filled first year.\nMy hope is that, if you’ve read this far, you’ve gotten a nugget or two that might help your own transition.\nSo, if you’re there – good luck!\nAppendix: Book Recommendations\nI’ve read many, many books on management. I think most are not terribly useful – often providing 3 pages of insight in 150 pages of text, or providing one interesting insight but adding in a lot of other topics because it seems obligatory.5\nI’m not going to badmouth any particular books, but I’ve read most of the currently-popular management books. If it’s not on this list, I’ve probably read it and didn’t think the marginal information gain was worth it.\nYour mileage may vary.\nTheory\nThese books strongly shaped the way I think about what management is and what a manager is doing.\nYou’ll notice that I lean towards older books on theory – both of these recommendations were written before I was born! While the computer, internet, and emote work have changed the practice of management, I don’t think the underlying theory has changed at all.\nI strongly believe that the core messages of these books are still fresh and important, though some of the commentary and assumptions, especially around gender, have not aged well.\nHigh Output Management (1983)\nAndy Groves’ classic on what management is and how to measure a manager. Light on practical advice, amazing for forming a mental model of management. I find myself constantly reaching for quotes from this book to describe good management.\nMythical Man Month (1975)\nFred Brooks’ tome on communicating across large groups and software complexity. Not strictly about management, but deeply impacted the way I think about the optimal size of working groups and how to help people be productive.\nPractice\nThis book helped me figure out what to do every day as a manager, providing concrete advice on how to do onboarding with people you’re newly managing, conduct 1:1s, and more.\nRadical Candor (2017)\nKim Scott’s book on how to provide direct and meaningful feedback to direct reports across a wide range of topics and venues. As a new manager, providing feedback was one of the strangest and hardest things to learn.\n\nThere are some great strategies to create an environment where team members can give feedback to team leaders. These are really important…but it’s pretty hard to get there, and as a manager I was flying blind most of the time.↩︎\nIf you or your team is trying to learn git, I strongly recommend Happy Git with R as a resource. Good luck, git is super awesome once you get it, but it’s a doozy.↩︎\nWriting is also an important tool as a manager. I’ve found writing really useful for me to work out my thoughts on something – or to get feedback from particular people. I’ve generally found it less useful as a way to convey information.\nMakes you wonder who this essay is really for…↩︎\nThe section on feedback in Radical Candor particularly influenced my thinking on this front.↩︎\nI am keenly aware of the danger of speaking ill of others writing, given my own limitations as a writer. But if it can be useful to you, maybe it’s worth it.↩︎\n",
      "last_modified": "2022-01-03T21:58:48+00:00"
    },
    {
      "path": "speaking.html",
      "title": "Things I've said",
      "description": "Recent presentations I've given",
      "author": [],
      "contents": "\nSelected1 slides are available at speakerdeck.\nGenerally, my presentations involve demoing R code, which is available on GitHub.\n\n\n{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"Date\":[\"2021-12-09\",\"2021-07-07\",\"2021-02-17\",\"2020-12-03\",\"2020-07-28\",\"2020-06-17\",\"2020-03-28\",\"2020-01-03\",\"2019-11-14\",\"2019-09-17\",\"2019-09-17\",\"2019-06-12\",\"2019-05-21\"],\"Title\":[\"<a href=https://docs.google.com/presentation/d/1NvL11GwM_B17BfFf8Xhg8VNT0cQx9Kzpy5_C3MJ6zo0/edit?usp=sharing>DCR: Reliably Reproducible R-Tifacts<\\/a>\",\"<a href=https://docs.google.com/presentation/d/1a7YvEsknIcOAUJGskjW-jooW-A4ochg12k7iS5WpwAs/edit?usp=sharing>UseR 2021: Reliably Reproducible Product Packages<\\/a>\",\"<a href=NA>RStudio Webinar: Managing Packages for Open Source Data Science<\\/a>\",\"<a href=https://docs.google.com/presentation/d/1eJFTvWB1svlSdUsv_-3h2-665VnCMz8Cya7MlOjTnwQ/edit?usp=sharing>DCR: Powerful Package Patterns<\\/a>\",\"<a href=https://docs.google.com/presentation/d/15rHvguWGVQ6elrw9G2CnJOasKvBS1TliEEDA931ZSVs/edit?usp=sharing>RStudio Webinar: Growing a Remote Data Science Team<\\/a>\",\"<a href=https://docs.google.com/presentation/d/1mAAU0sw7GIVwOeGVsvdZCWA86mHhu-GZgkjYgreqmBk/edit>e-RUM: Design Patterns for Big Shiny Apps<\\/a>\",\"<a href=https://docs.google.com/presentation/d/1PJT0LfTAMz_6GCyLxMnPDAWqKmzWJKCOfcXosH-jEVk/edit?usp=sharing>DC SatRDays: Break Up Shiny Apps<\\/a>\",\"<a href=https://github.com/akgold/rsconf2020-deployment/blob/master/RStudio%20Conf%202020%20Talk.pdf>RStudio::conf(2020): Deploying End-to-End Data Science with Shiny, Plumber, and Pins<\\/a>\",\"<a href=https://speakerdeck.com/akgold/r-and-big-data-databases>Big Data London 2019: Big Data and R: Databases<\\/a>\",\"<a href=https://speakerdeck.com/akgold/love-for-linear-models>DC Data Science Meetup: Love for Linear Models<\\/a>\",\"<a href=https://speakerdeck.com/akgold/2019-09-17-creating-reproducible-data-science>Webinar: Reproducible Data Science<\\/a>\",\"<a href=https://speakerdeck.com/akgold/2019-06-12-big-data-toronto-spark>Big Data Toronto 2019: Big Data and R, Spark<\\/a>\",\"<a href=https://speakerdeck.com/akgold/2019-05-21-data-scientists-and-software-engineering>Data Scientists Doing Software Engineering<\\/a>\"],\"Code\":[null,null,null,null,null,\"<a href=https://github.com/akgold/erum-big-shiny>Code<\\/a>\",\"<a href=github.com/akgold/shiny_break_up_satrday>Code<\\/a>\",\"<a href=https://github.com/akgold/rsconf2020-deployment>Code<\\/a>\",\"<a href=https://github.com/akgold/bdl_2019>Code<\\/a>\",null,\"<a href=https://github.com/akgold/2019-09-17_john_deere_webinar>Code<\\/a>\",\"<a href=https://github.com/akgold/big_data_2019>Code<\\/a>\",null],\"Video\":[\"<a href=https://youtu.be/-6TlzhRA9vA>Video<\\/a>\",null,\"<a href=https://rstudio.com/resources/webinars/managing-packages-for-open-source-data-science/>Video<\\/a>\",null,\"<a href=https://rstudio.com/resources/webinars/enabling-remote-data-science-teams/>Video<\\/a>\",\"<a href=https://youtu.be/NwVOvfpGq4o>Video<\\/a>\",null,\"<a href=https://rstudio.com/resources/rstudioconf-2020/deploying-end-to-end-data-science-with-shiny-plumber-and-pins/>Video<\\/a>\",\"<a href=https://www.youtube.com/watch?v=GQcEnlz3jrI>Video<\\/a>\",null,null,null,null]},\"columns\":[{\"accessor\":\"Date\",\"name\":\"Date\",\"type\":\"character\",\"width\":110},{\"accessor\":\"Title\",\"name\":\"Title\",\"type\":[\"glue\",\"character\"],\"html\":true},{\"accessor\":\"Code\",\"name\":\"Code\",\"type\":\"character\",\"html\":true,\"maxWidth\":60},{\"accessor\":\"Video\",\"name\":\"Video\",\"type\":\"character\",\"html\":true,\"maxWidth\":65}],\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"dataKey\":\"555f06d69436098bc0c12de7f0cdd77b\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}\n\nOnes I haven’t been too lazy to put there…↩︎\n",
      "last_modified": "2022-01-03T21:58:49+00:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
