[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Major Writing Projects",
    "section": "",
    "text": "Major Writing Projects\n\n\n\nEssay: Managing the First Year\nAn essay about the (many) lessons I learned in my first year of managing a data science team.\nüìïüèóDevOps 4 Data Scienceüèóüìï\nAn book on lessons for Data Scientists from DevOps, how to manage your own server-based data science platform, and how to work with IT at your organization.\nVery much a work in progress. Expected completion of rough draft: June 2022.\n\n\n\n\n\nBlog Posts\n\n\n\n\n  \n\n\n\n\nI left a PhD Program, maybe you should too!\n\n\n\n\n\nA personal essay on leaving a PhD program\n\n\n\n\n\n\nyyyy-09-Fr\n\n\n\n\n\n\n  \n\n\n\n\nR Packages for Experts, not Wizards\n\n\n\n\n\nWrite internal R packages for your team that disseminate expertise, not cleverness.\n\n\n\n\n\n\nyyyy-12-We\n\n\n\n\n\n\n  \n\n\n\n\nRViews: Production Shiny Apps with Pins\n\n\n\n\n\nUse pins to create production shiny apps.\n\n\n\n\n\n\nyyyy-10-Th\n\n\n\n\n\n\n  \n\n\n\n\nRViews: 3 Big Data Strategies for R\n\n\n\n\n\nThree strategies for using big data in R\n\n\n\n\n\n\nyyyy-07-Su\n\n\n\n\n\n\n  \n\n\n\n\nUpgrading to R #3: Be the Data Engineer you Need\n\n\n\n\n\nBe the data engineer of your dreams.\n\n\n\n\n\n\nyyyy-02-We\n\n\n\n\n\n\n  \n\n\n\n\nUpgrading to R #2: Failure‚Äôs Coming, Get Ready!\n\n\n\n\n\nPrep in advance for things to be hard.\n\n\n\n\n\n\nyyyy-01-We\n\n\n\n\n\n\n  \n\n\n\n\nUpgrading to R #1: Excitement &gt;&gt; Skills\n\n\n\n\n\nGetting the team excited matters more than initial skill level\n\n\n\n\n\n\nyyyy-01-Su\n\n\n\n\n\n\n  \n\n\n\n\nUpgrading to R: RStudio Conf 2019\n\n\n\n\n\nUpgrading a team to R.\n\n\n\n\n\n\nyyyy-01-Sa\n\n\n\n\n\n\n  \n\n\n\n\nCustom fonts in ggplot2\n\n\n\n\n\nUse custom fonts in ggplots\n\n\n\n\n\n\nyyyy-08-Mo\n\n\n\n\n\n\n  \n\n\n\n\nRStats NYC 2017\n\n\n\n\n\nWrite up of NYR 2017\n\n\n\n\n\n\nyyyy-04-Su\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "mfy.html",
    "href": "mfy.html",
    "title": "Managing the First Year",
    "section": "",
    "text": "My first managerial role came by surprise.\nI had just started as a data scientist at a large consulting firm, and my manager was out for my first week with a sprained ankle. I spent that week getting to know the three other folks on the team, thinking I was the new senior data scientist. I was excited to get my hands dirty.\nIt was during my second week that I met with my manager and understood that no, I‚Äôd been hired to replace her as the team‚Äôs manager.\nFor the next 18 months I stayed in that role, directly managing a team of 4-8 data scientists. That time was a firehose of learning ‚Äì some were lessons I sought out, and others landed on my head without invitation. I bought many books on management and implemented some of the nuggets I found in those thousands of pages.\nBut I learned even more from some of the big, stupid mistakes I made ‚Äì including one that literally interrupted my honeymoon on the beaches of Croatia.\nLater, when I joined RStudio, I moved back into an individual contributor role on the Solutions Engineering team. It was around that time I started writing this essay ‚Äì and I‚Äôm now declaring it done, some three years later.\nI‚Äôm not a management expert, but I did try really hard during my first year managing and I‚Äôve since spent time digesting the experience. My hope is that others will find a few of the things I learned useful when they‚Äôre at the start of their own management journey."
  },
  {
    "objectID": "mfy.html#my-definition-of-management",
    "href": "mfy.html#my-definition-of-management",
    "title": "Managing the First Year",
    "section": "My definition of management",
    "text": "My definition of management\nI‚Äôve found management most exciting as a form of leverage. I could only ever type so many lines of code in a day, fit so many models, deploy so many apps. Management was a way to scale myself.\nAs best I can explain it:\n\nGood management is a flywheel generator ‚Äî it gives the team clarity and helps them feel safe to experiment and grow, resulting in ever-higher levels of collective performance.\n\nReading this clever and finely worded definition fills me with the warm glow of a concept well-encapsulated. But let‚Äôs be honest, you ‚Äî reader ‚Äî are reading in hopes of being a better manager or, maybe even more likely, understanding why your manager is so bad.\n\nThe philosophers have only interpreted the world, in various ways. The point, however, is to change it.\n- Karl Marx, Eleven Theses on Feuerbach\n\nIf you‚Äôre looking to change the circumstances of your management or managing, this definition is maddeningly vague.\nWhen I started in on all those management books, I figured management would be like other things I had done in my professional life. When I wanted to do machine learning, I‚Äôd read some books and then used machine learning techniques on some data.\nBut it turned out management didn‚Äôt work like that. It turned out management was a craft.\nAnd like any craft, some theory was helpful, but the hard part was putting that theory into practice."
  },
  {
    "objectID": "mfy.html#management-was-hard",
    "href": "mfy.html#management-was-hard",
    "title": "Managing the First Year",
    "section": "Management was hard",
    "text": "Management was hard\nUnlike data science, where learning more was the answer to a skills gap, my time spent in books didn‚Äôt seem to translate directly into being better at my job.\nAs a manager, I found that it wasn‚Äôt knowledge I needed, it was the daily practice of doing the work. And in that, I was constantly bumping up against the limits of my bravery and patience.\n\nStay awkward, brave, and kind.\n-Bren√© Brown\n\nWhen I came back from my honeymoon, I let my ego and my fear of being wrong again get the better of me. I knew that the code and the plots weren‚Äôt good enough, and my review could have caught it. I decided that all of the team‚Äôs code would be checked into git every night and I would review it.\nThis was a dumb rule ‚Äì for many reasons.\nThe simplest reason it was dumb was that I‚Äôd neglected my first role as a manager ‚Äì to make the team work well. The people on my team were smart, so this mistake wasn‚Äôt an issue of intelligence. Instead, I hadn‚Äôt shared enough context about these plots so my team could catch the mistakes themselves.\nShortly after this incident got resolved, I adopted the maxim always provide more context. I found that every minute I put into providing context around why the work was the way it was paid back 10x later on. My team was made up of motivated, smart people, so once they had the necessary context, it was easy for them to spot mistakes or find improvements.\nFor a few weeks after the imposition of my new rules, I found myself in the midst of a howling maelstrom. People were not listening to the new rules, they weren‚Äôt doing their work, and they were even threatening to leave for another project.\nAnd I couldn‚Äôt figure out why the response had been so extreme. Sure, my rules might be silly, but the response seemed very intense.\nIt gradually dawned on me that I had touched a live wire. People‚Äôs work matters to them. It bumps up against the deepest questions they ask themselves about their value and worthiness.\nAnd in my haste to ‚Äúfix the problem‚Äù, I had infantilized the team. And for my team, mostly recent college grads, the intimation that they still might be children after 16+ years of school was about the worst thing I could do.\nEven worse, the new rules were a source of fear. One of the main rules was that code had to be checked into git every night. From my own experience, I knew how hard git is. It is so hard to develop a reliable mental model, and it feels like all the code might go poof with any action.1 And I told my team they had to use it constantly, with no help or guidance from me.\nA big component of the problem was me struggling to manage my own fears and insecurities. I watched my team doing fantastic technical work while I perceived the atrophy of my own technical skills. For me, the challenge was avoiding slipping into defensiveness at that thought. To make it all harder ‚Äì and I‚Äôve read enough to believe this is true of all managers ‚Äì I got shockingly little feedback on how I was doing.2\nMostly for worse ‚Äì but some for better ‚Äì my commute to this job was quite lengthy, and I listened to this episode of the excellent Start Up Podcast in which someone says the line, ‚Äúorganizations magnify the worst traits of their leaders‚Äù. I have seen nothing that makes me think this is anything less than 100% true.\nMy only piece of truly directive advice for any new managers reading this essay:\n\nGo do therapy/counseling.\n\nWe all have traits and quirks that are maladaptive in a management role. Therapy won‚Äôt fix them, but it certainly helped me be more aware of my tendencies and patterns, more able to step outside and observe them, and (I hope) reduced the likelihood I unwittingly perpetuated them on my team.\nEventually, once I grasped that the main thing I was actually doing was providing context and managing feelings, and things started going much smoother. Instead of walking into work every day thinking through some technical challenge or another, I tried to activate the best of my bravery and patience for the day ahead and I started digging myself out of the hole I‚Äôd fallen in with the team."
  },
  {
    "objectID": "mfy.html#management-was-just-a-bunch-of-roles-smashed-together",
    "href": "mfy.html#management-was-just-a-bunch-of-roles-smashed-together",
    "title": "Managing the First Year",
    "section": "Management was just a bunch of roles smashed together",
    "text": "Management was just a bunch of roles smashed together\nNow that you‚Äôre bought into the idea that management can‚Äôt really be learned from a book or essay, I‚Äôm going to go into my mental model of management.\nIt‚Äôs true that a mental model didn‚Äôt save me from big mistakes. But it‚Äôs also the case that one of my earliest barriers to getting better was not understanding what management was. I didn‚Äôt even know what I should be trying to improve.\nHopefully, sharing my mental model can clarify what things you might want to get better at.\nCentral to my mental model of management is that it isn‚Äôt actually a role. Manager is a title applied to a collection of largely distinct roles.\nBefore I became a manager, I had heard that management is exhausting because of the amount of context switching required. It turned out for me that this was less about having a calendar packed full of meetings with different people on different topics than it was about having to switch the role I was playing from minute to minute.\n\nA manager‚Äôs output = The output of his organization + The output of the neighboring organizations under his influence.\n-Andy Grove, High Output Management\n\nIt felt to me like there were six roles to my job as a manager, from most to least ‚Äúmanager-y‚Äù:\n\nAs a people manager, I learned what made my direct reports tick, identified their career aspirations, and pointed out opportunities for progress.\nAs a resource manager, I determined what resources we needed and acquired them. Mostly this meant recruiting, hiring, and onboarding, but it also meant advocating for money for training and team activities.\nAs a project manager, I collected and triaged projects and project requirements, set timetables and schedules, assigned tasks, and had the final say about when work was ‚Äúdone‚Äù.\nAs the team‚Äôs communications manager, I made sure the team‚Äôs work was being shared with the rest of the organization, and that everyone on the team knew what was going on outside.\nAs the process manager, I helped design the team‚Äôs processes to make sure we could identify, allot, do, and communicate work across the team.\nAs a technical mentor and coach, I was an expert who reviewed code, answered technical questions, and gave work feedback to my team.\n\nFor the most part, these roles felt pretty distinct from each other, and each of them was a meaningful part of my job.\nIn fact, in recognition of the fact I was working at a consulting firm where people frequently changed projects, my role was explicitly divided between my role as a people (‚Äúcareer‚Äù) manager and a ‚Äújob lead‚Äù who managed a particular project and its resources.\nI found that I actually liked this division, as it gave more opportunities to acquire mentors and mentorship. Also, career conversations were truly about career ‚Äì I wasn‚Äôt close enough to the work that status updates made much sense.\nMy technical skills were relevant in many of these roles ‚Äì but not in the way I had thought. For the most junior employees, my skills outmatched theirs, and I was able to explicitly teach them technical things. But more senior people on the team quickly matched or exceeded my skills.\nThe primary relationship between my data science skills and my skills as a data science manager was that my technical skills helped me ask the right questions. Ultimately, my direct reports succeeded and learned more when they were asked questions than when given answers.\n\nMeetings were my main tool\nMy first, and most obvious, observation about being a manager was that nothing I did was a solo activity. In the work world, any gathering of two or more people is a meeting. Thus, meetings were my main tool as a manager.\nThe meetings varied widely in both form and content. Many were 1-1 meetings between a direct report and, others were team-wide update or decision-making meetings.\nPrimal disdain for meetings is pretty common in tech circles. I believe this is a toxic overreaction to cultures where meetings are all that happens or a result of environments (or people) that undervalue the importance of communication. I came to believe that meetings per se were not the problem.\nInstead, I came to believe meetings are bad when they:\n\nResult in calendar fragmentation.\nFeel useless to attendees.\n\nPreventing calendar fragmentation is a genuinely hard problem. Meetings tend to migrate to places where there are large open blocks of time on people‚Äôs calendars. There‚Äôs definitely no one-size-fits-all solution, but a focus-time-first orientation to making calendars can help. Aside from that, I found no great solutions here aside from trying to minimize the number of meetings and their size.\nThere have been so many books written on making meetings (feel) useful. Generally, they present a system or tactic to make meetings (feel) useful. Amazon makes everyone read a memo before they start. Tim Ferris won‚Äôt show up if there isn‚Äôt an agenda ahead of time. 1-1s are supposed to be ‚Äúthe employee‚Äôs meeting‚Äù where they come with an agenda and get to do most of the talking.\nThey‚Äôre fine rules.\nBut I think the focus on tactics often missed the point. Let‚Äôs take the example of 1-1 meetings with direct reports, which I found incredibly valuable ‚Äì even fun!\nUp to the point I became a manager, I didn‚Äôt have great experiences with 1-1s. Most of my career didn‚Äôt feature formal 1-1s, and the one manager who adopted a real 1-1 playbook managed to make them a potent source of toxicity, format notwithstanding.\nSo, I walked into management really confused about how to do good 1-1s, and deeply skeptical of prescriptive formats.\n\nMy skepticism about meeting formats was later deepened by my first manager at RStudio.\nI loved our 1-1s despite (or because?) he broke every 1-1 rule I‚Äôve ever seen. He talked more than he listened, meandered to wild places, and we never kept an agenda. But each one made me feel valued and seen and I left with clarity about my work. They were amazing.\n\nIn the meetings I ran, I found it was important to make clear why we were there and actually focus on that why in the meeting. Sometimes the tactics from books were helpful‚Ä¶but it constantly varied meeting to meeting and I struggled to taxonomize the meetings or tactics.\nKeeping the focus on what we were there to do never went wrong.\n\nHaving meetings (or parts of meetings) for frivolous fun or to get to know each other is really important ‚Äì doubly so for remote teams. Just make clear that‚Äôs what they‚Äôre for!\n\nThe one kind of meeting that is always bad is the group brainstorm with more than about four people. Groups that large don‚Äôt do good exploratory thinking. Skip them, write a memo ahead of time, and debate options at the meeting.3"
  },
  {
    "objectID": "mfy.html#my-words-carried-a-lot-of-power",
    "href": "mfy.html#my-words-carried-a-lot-of-power",
    "title": "Managing the First Year",
    "section": "My words carried a lot of power",
    "text": "My words carried a lot of power\nIt‚Äôs important to be aware of implicit sources of power in a workplace, like identity-based privilege, technical knowledge, and tenure. Despite being pretty comfortable talking about power and privileged in my life, I was surprised by how much power was still embedded in the explicit management structure of the organization.\nI initially wanted to believe that nothing had changed because I was a manager ‚Äì I could still be ‚Äúone of the team‚Äù. But it quickly became obvious that my feedback ‚Äì positive, negative, and even neutral ‚Äì carried a weight it didn‚Äôt before.\nThis shouldn‚Äôt have been surprising. I‚Äôd had the experience of a manager who would frequently message ‚Äúhave a minute to talk?‚Äù. Every single time, my heart jumped into my throat, even though it was usually just to chat about something minor.\nAfter I observed myself doing the same, I tried to always explain why in the same message as a request to meet with a direct report.\nEven more navel-gaze-y, I realized that the form and timing of my communication mattered, because they implicitly set expectations about work habits for others.\nI tried really hard not to send messages outside of work hours ‚Äì and I made a big deal of visibly unplugging when I went on vacation. I felt those were important norms for our team, and the easiest way to upend them would‚Äôve been to be seen not following them myself.\nIt took me a while to calibrate just how often ‚Äì and quickly ‚Äì I had to give feedback.4 I found that critical feedback has a way shorter half-life than I assumed.\nThe first few times I had critical feedback I held it, waiting for a convenient time. But after I‚Äôd waited a week, it felt petty to bust out, ‚ÄúRemember that presentation last week? You really should‚Äôve proofread it before we showed a typo to the client.‚Äù And I was worried it‚Äôd be blown out of proportion in my direct report‚Äôs head because it had bothered me enough to hold onto for so long.\nI never delivered that feedback.\nI found the quicker I could give critical feedback, the better ‚Äì and that the same was also true for positive feedback.\nI don‚Äôt have a great anecdote from when I was managing, but a good friend of mine was getting very little feedback at her job. She didn‚Äôt really know if she was doing well and didn‚Äôt feel like her role was valued in the organization ‚Äì until the day she resigned.\nSuddenly, accolades were pouring in from leadership across the organization - all the way up to the organization‚Äôs head. She was told for the first time that the program she ran made a difference, and that her role was essential. She was personally lauded for the grace, professionalism, and strategic thinking she brought into every meeting.\nIt meant she left feeling good, but what an utter failure of management!"
  },
  {
    "objectID": "mfy.html#some-challenges-i-could-identify-but-couldnt-solve",
    "href": "mfy.html#some-challenges-i-could-identify-but-couldnt-solve",
    "title": "Managing the First Year",
    "section": "Some challenges I could identify, but couldn‚Äôt solve",
    "text": "Some challenges I could identify, but couldn‚Äôt solve\nAside from the many skills I had to learn and the day-to-day skills I had to develop, some of the roles I inhabited as a manager involved ongoing balancing challenges that I don‚Äôt think ever really end.\n\nI was stuck in-between\nOne of the strangest parts of being a first-level manager was how much I felt stuck between the organization above me and the people who worked for me.\nI believe my employer genuinely wanted to treat employees well. They were not trying to ‚Äì as Jack so eloquently put it on 30 Rock ‚Äì ‚Äúsqueeze the sweetest juice out of workers‚Äô mind grapes.‚Äù\nEven so, I felt a tension between looking out for the company and looking out for my direct reports. In those cases, I generally found it easy to prioritize the people who worked for me. This was especially true since it was many of their first jobs and they hadn‚Äôt quite figured out how to advocate for themselves in a workplace.\nThis materialized in simple ways, like with the woman on my team who was a dual citizen. The complexities of having multiple passports and working on projects for the federal government meant she couldn‚Äôt visit her parents while she was on the project. It was easy for me to frequently ask whether that was still ok or whether we should start looking for another project.\nBut there were also other cases that were much harder ‚Äì where there was a tension between my role as a mentor for particular members of my team and my responsibilities to the team as a whole.\nFor example, someone on the team confidentially shared that she was considering another project that would give her more exposure to machine learning. From my perspective as her professional mentor, this was awesome - that was the work she really wanted to do!\nBut it was hard for me to keep this information confidential, because sitting on it meant less time to discuss what to do if she left, and more stress for the rest of the team down the road.\nMy sense is that exactly what you‚Äôre stuck between does change depending on the level of management‚Ä¶but I‚Äôm not sure this between-ness ever really resolves.\n\n\nResource management was particularly hard\nI despise the use of the term resource to describe a person on a team, like, ‚Äúwe‚Äôre going to need to add a resource in Q3‚Äù ü§Æ.\nBut the main resource I managed was the number of people we had and the roles they filled. I found that figuring out the right number of people for our team was an entirely new skill to master.\nBefore I was a manager, I basically just had to figure out how hard to work.\nAs a manager, I gained the mind-bending ability to make more time by adding people. Simultaneously deciding how much work the team could take on and how many people we needed required solving an underdetermined system of equations.\nWith no clear right answer, I had to rely on my judgment about the importance of the marginal bit of work and how quickly we could add team members.\nAnd it wasn‚Äôt even that simple! Because I was a stuck-between manager, I couldn‚Äôt just decide to add more people or even to spend money on other things like a course or a team dinner ‚Äì I had to convince several layers of management above me that we needed them.\nDeciding how hard to push ‚Äì and when - and for what roles ‚Äì is a challenge that I don‚Äôt think ever really ends.\n\n\nMentoring was different\nI knew I was a good data scientist with a particularly strong background in econometrics and statistics, and I had become a very proficient R programmer. I had done a lot of teaching, which I loved. I figured I had the mentoring part of the job in the bag.\nYet again ‚Äì wrong.\nIt turned out that I was good at teaching and instructing. I was good at clearly explaining technical topics, making them clear and approachable. That was useful.\nBut it turned out that an even bigger part of mentoring as a manager was coaching, rather than teaching. I had to help my direct reports develop an inspiring vision for their career ‚Äì or at least for their involvement in the current project. It was a heady task ‚Äì figuring out how to convey really high expectations for people without setting short-term goals or deadlines that were unreasonable.\nMoreover, it was hard to figure out how to balance people‚Äôs need for development, letting them slow down and take time to learn, with the need to get stuff done in the quickest way possible. As a manager, it was my responsibility to figure out when we had to focus on efficiency and when there were good opportunities for learning."
  },
  {
    "objectID": "mfy.html#i-loved-management",
    "href": "mfy.html#i-loved-management",
    "title": "Managing the First Year",
    "section": "I loved management",
    "text": "I loved management\nI‚Äôve mostly written about how hard management was and how it defied my expectations.\nThat‚Äôs all true.\nBut it‚Äôs also the case that I loved my role as a manager. I experienced so much joy as I watched the connections between the people on my team get denser, and the team‚Äôs topology came more to resemble a spiderweb than a wagon wheel with me at the center.\nI found, curiously enough, that my joy at seeing what the team accomplished was inversely proportional to my involvement in it.\nNow, having been at RStudio almost three years and being back in management, I look back quite fondly on that hectic, intense, learning-filled first year.\nMy hope is that, if you‚Äôve read this far, you‚Äôve gotten a nugget or two that might help your own transition.\nSo, if you‚Äôre there ‚Äì good luck!"
  },
  {
    "objectID": "mfy.html#footnotes",
    "href": "mfy.html#footnotes",
    "title": "Managing the First Year",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you or your team is trying to learn git, I strongly recommend Happy Git with R as a resource. Good luck, git is super awesome once you get it, but it‚Äôs a doozy.‚Ü©Ô∏é\nThere are some great strategies to create an environment where team members can give feedback to team leaders. These are really important‚Ä¶but it‚Äôs pretty hard to get there, and as a manager I was flying blind most of the time.‚Ü©Ô∏é\nWriting is also an important tool as a manager. I‚Äôve found writing really useful for me to work out my thoughts on something ‚Äì or to get feedback from particular people. I‚Äôve generally found it less useful as a way to convey information.\nMakes you wonder who this essay is really for‚Ä¶‚Ü©Ô∏é\nThe section on feedback in Radical Candor particularly influenced my thinking on this front.‚Ü©Ô∏é\nI am keenly aware of the danger of speaking ill of others writing, given my own limitations as a writer. But if it can be useful to you, maybe it‚Äôs worth it.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html",
    "title": "RStats NYC 2017",
    "section": "",
    "text": "Friday and Saturday of this weekend was the 2017 RStatsNYC conference. With the small exception of remarkably uncomfortable chairs, the conference was fantastic (and great food!). There was a remarkable variety in what the speakers covered ‚Äì from deep thoughts on the ethics and philosophy of doing data science, to some super useful RStudio tips and tricks and everything in between. I decided to take my notes from the two days and post below in case there‚Äôs things anyone else might find useful.\nOne of the remarkable similarities between the speakers was the degree to which many talks focused on process of doing data science. It feels like there‚Äôs a lot of room for growth in terms of understanding and standardizing best practices of doing data science."
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html#deep-thoughts",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html#deep-thoughts",
    "title": "RStats NYC 2017",
    "section": "Deep Thoughts",
    "text": "Deep Thoughts\nMany of the speakers shared some great nuggets of insight into doing data science that extended far beyond simple lessons about R. Some of my favorites below.\n\nThe Past, Present, and Future of Data Science\n\nStatistics has gradually added different parts of the statistical process to the field ‚Äî but many process points remain to be integrated. We don‚Äôt have a theory of a good statistical workflow. Meta-systematization is needed. We need to systematize how we systematize things.\nWhy do we need theory? Theory is scalable. Simulations are not.\nWe should be specifying priors about effect sizes along with research designs.\nIs having a core data science team at a company a good thing or a bad thing?\nThe history of software engineering is a great guide for the future of data science.\nAs data gets bigger, machine learning problems and questions will get bigger too. Our jobs are safe.\nThe hardest job of a data scientist is turning open-ended problems in the real world into practical problem statements that are solvable using data. Defining success is essential.\nSoftware engineers build and grow software ‚Äî the sky is the limit. Data scientists are scientists and are constrained by the real world.\n\n\n\nData Science as Business Intelligence (and Empathy)\n\nAnalysis doesn‚Äôt end at result delivery ‚Äî it ends at developing and proselytizing new business strategies and innovation.\nAutomating Excel workflows can be a first step towards bringing R to a team.\nAgile development tells user stories as an empathy hack.\n\n\nAs a ______\nI want ______\nSo I can ______ \n\nPerson-level stories (the near) are always more meaningful than data stories (the far). We need to balance both as Data Scientists.\nIn development, we need to have an actual user in mind, rather than a theoretical user who wants everything.\n\n\n\nHow to Live-Tweet an Event (a great aside)\n\nThree important elements in live tweet of event: conference hashtag #rstatsnyc, @speaker (put . first so it‚Äôs viewable publicly), always include a pic.\nThey can have one of a few purposes: intro person/topic, spread insight, link to resource, spread positivity!\n\nLive tweet: conference hashtag, @speaker, picture, positivity \n\n\nHow to Hackathon\n\nIf you‚Äôre not at risk of failing a few days a quarter, you‚Äôre not pushing.\nKeys to focused hacking: rock solid infrastrure, minimize context switching (away messages), parallel work, strong and clear conversation, timeline accountability (detailed to the half-hour), positive team dynamic, time-boxing decisions.\nHow to start an analysis:\n\nIdentify assumptions about a solution\nRank assumptions by how critical they are\nTest assumptions with the simplest experiment possible\n\nFail fast. The worst thing about spending a few months barking up the wrong tree isn‚Äôt the time or money lost ‚Äî it‚Äôs team demoralization.\nTruths about data science:\n\nNerd != won‚Äôt engage with business\nShiny tool != hard problem\nShiny tool != being a smart data scientist\n\n\n\n\nOpen Source and Package-Building\n\nThe hardest step in joining the open source community is going from 0 contributions to 1.\nOpen source contributions: failing test with fix &gt; failing test &gt; bug report\n\nRemember to include sessionInfo()\n\nPackage release ideas:\n\nRelease quickly, but also slowly ‚Äî take time to fix dumb decisions\nBlaze new trails, but don‚Äôt reinvent the wheel\nTell people about your package ‚Äî then listen.\n\nPackage design: documentation &gt; usability &gt; performance &gt; features"
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html#interesting-research",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html#interesting-research",
    "title": "RStats NYC 2017",
    "section": "Interesting Research",
    "text": "Interesting Research\nThere were only a few presentations of actual research projects ‚Äî but the ones presented were really wonderful.\n\nCell tower data can reveal interesting patterns in movement ‚Äî in particular return to normal flow of people after natural disasters.\nStack Overflow has a selection of data from stack overflow ‚Äî can do text analysis on it. There‚Äôs also a jobs list and an api.\nIt is possible to predict which officers in police departments will have adverse incidents with the public in order to arrange interventions. Nashville and Charlottesville are doing this. This work can save lives.\nROpenSci does peer review for R packages. Many of their packages get data from scientific databases or interface with scientific equipment."
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html#statistical-and-programming-tools",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html#statistical-and-programming-tools",
    "title": "RStats NYC 2017",
    "section": "Statistical and Programming Tools",
    "text": "Statistical and Programming Tools\n\nConvolutional Neural Net: used for image recognition\nVPNs are good privacy tools, we should probably all use one."
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html#r-packages-to-investigate",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html#r-packages-to-investigate",
    "title": "RStats NYC 2017",
    "section": "R Packages to Investigate",
    "text": "R Packages to Investigate\nThere were so many neat R packages mentioned over the course of the conference. Here was a short list of ones I didn‚Äôt know and wanted to look into.\n\npackrat: helps you create a package template file\nplumber: allows you to easily turn regular R code into an API\nRXKCD: add XKCD cartoons to stuff!\ntrelliscope: many-panel data vis\ncompareGroups: compare demographics and other aspects across groups\nhtmlWidgets: integrate javascript applets into R code. We want interactivity, and javascript is de-facto standard for everything having to do with interactivity.\n\nipywidgets: similar for python\n\nbroom: turn analytics output into tidy data frames\ngoodpractice: does a variety of checking for good package development practice\n\nlintr: helps check for good code style\ndevtools::spellcheck()\n\nsolidify, highcharts: commonly used presentation packages\ntidytext: help turn text into tidy data frames"
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html#generally-helpful-programming-hints-tips-and-tricks",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html#generally-helpful-programming-hints-tips-and-tricks",
    "title": "RStats NYC 2017",
    "section": "Generally Helpful Programming Hints, tips, and tricks",
    "text": "Generally Helpful Programming Hints, tips, and tricks\n\nrr-init: ROpenSci package to create skeleton of project\nRun R script myscript.R from command line: Rscript myscript.R\nRStudio Server runs on port 8787 by default\nAnaconda can be used to download a local R version\nCan install entire tidy verse at once: install.packages(‚Äútidyverse‚Äù)\nAlways choose a license for your github repo. MIT is the loosest.\nCan put an empty folder in a git repo by creating and adding a file to git touch folder/.gitkeep\nmake bash ‚Äî can create a makefile (make.sh) with assigned dependencies and will only run files that have been updated since last run\nJoin R mailing list\nContributing to documentation (or improving unhelpful error messages) is a great way to get started on contributing to Open Source\nIn R save() saves multiple objects with their names as .Rda. Using load restores them into the environment. saveRds() saves a single object without its name. Restoring requires assignment a &lt;- readRds()."
  },
  {
    "objectID": "posts/2019-11-09-rstats-nyc-2017/index.html#rstudio-hints-tips-tricks",
    "href": "posts/2019-11-09-rstats-nyc-2017/index.html#rstudio-hints-tips-tricks",
    "title": "RStats NYC 2017",
    "section": "RStudio Hints, Tips, Tricks",
    "text": "RStudio Hints, Tips, Tricks\nThe RStudio folks gave a great presentation on some tricks and tips in RStudio. Some of my favorite takeaways:\n\nRealtime inline TeX previews in RNotebooks: $EQN$\nNotebook preview ‚Äî doesn‚Äôt re-run, just renders what‚Äôs been run\nCan include code chunks that run code other than R (SQL, Bash, Python). Instead of {r} in chunk header, put (e.g.) {sql connection = con, output.var = ‚Äòvarname‚Äô} and then can put SELECT statement in body that will be assigned to varname\nIf you want to include variables in SQL code, use ?varname in code.\nRStudio git integration provides nice way to view diffs\nTab autocomplete is fuzzy ‚Äî just type unique letters in command and tab for rest\nShift-Tab to insert code snippets ‚Äî there are built in (tools &gt; global options &gt; code snippets)\nStarting to type a command and then cmd + arrow up gives history of all times that command used\nCan easily go from history to console or script\nctrl + . search files, fns, etc\nCTRL + SHIFT + . search among tabs\nctrl + shift + f (‚Äúor if that‚Äôs too hard to remember, ctrl capital F‚Äù) to customize where searching\nSHIFT + ALT + k list keyboard shortcuts"
  },
  {
    "objectID": "posts/2019-10-17-production-shiny-w-pins/index.html",
    "href": "posts/2019-10-17-production-shiny-w-pins/index.html",
    "title": "RViews: Production Shiny Apps with Pins",
    "section": "",
    "text": "RViews Post"
  },
  {
    "objectID": "posts/2019-07-07-r-big-data/index.html",
    "href": "posts/2019-07-07-r-big-data/index.html",
    "title": "RViews: 3 Big Data Strategies for R",
    "section": "",
    "text": "RViews Post"
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html",
    "href": "posts/2022-09-16-phd-dropout/index.html",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "",
    "text": "In the summer of 2012, I arrived at the little yellow house I‚Äôd be sharing with two other members of the entering cohort at Duke‚Äôs Economics PhD program.\nFresh off a two-year stint working as a Research Assistant the Brookings Institution ‚Äì surrounded by very smart people with PhDs, I showed up thrilled at the idea of pushing the boundaries of the field, learning new depths of econometrics and statistics, and bonding with the other hopefuls in my program.\nLittle did I know that in just over a year, I‚Äôd be packing my stuff into my family‚Äôs minivan and heading back to DC to spend the fall giving Segway tours of the monuments. When I showed up at that little house in Durham, I would‚Äôve been shocked if someone had told me that I‚Äôd be leaving ‚Äî or that a decade, five organizations, and many jobs jobs later, I have never once regretted that decision.\nI don‚Äôt think everyone should quit their PhD, but I think the optimal dropout rate is far higher than observed (you know I got a masters in econ because I say words like optimal with a straight face). And whether or not you drop out, you should spend at least a little time considering it.\nSome people might argue that it‚Äôs been a decade (A DECADE!) since I dropped out and this advice isn‚Äôt really relevant for people today. Maybe that‚Äôs right. ü§∑üèº\nAll I know is that I first outlined this essay in 2015 when I was only 2 years out of grad school. I‚Äôm embarrassed to say that seven years of development led to marginally tighter writing, but no changes to the reasons I dropped out or my clarity that it was the right choice.\nSo, here‚Äôs why I dropped out and why I don‚Äôt regret it.\nAs with all advice, your mileage may vary."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#a-phd-is-a-terrible-insurance-plan",
    "href": "posts/2022-09-16-phd-dropout/index.html#a-phd-is-a-terrible-insurance-plan",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "A PhD is a terrible insurance plan",
    "text": "A PhD is a terrible insurance plan\nIf academia is the only place you‚Äôll be happy working in the future, this essay isn‚Äôt for you. The only path to academia is through a PhD program, so fare thee well!\nThat wasn‚Äôt me.\nWhen I started grad school, the only thing I knew was that I didn‚Äôt want to go into academia. I loved the first two years I worked at Brookings and thought maybe I wanted to go back and do more think tank work. Or go into government. Really, I wanted to work in The West Wing (the TV show where eight people run the entire government, not the physical building as it actually functions).\n\nHere‚Äôs a moment that captures why I didn‚Äôt want to go into academia.\nI was at a dinner where a professor was discussing his work on the ‚Äúproduction technology of education‚Äù ‚Äì aka teaching.\nHe talked about why his work was interesting ‚Äî new exciting methodological techniques, exciting new data all the time, and plentiful publishing opportunities in general and special-purpose journals.\nNowhere in his extended pitch did he mention that there were opportunities to understand teaching and education to the aim of actually improving teaching and student experience in school.\nüôÑ\n\nBy the spring of my first year, I‚Äôd spent months unhappy with my classes and I knew I was struggling socially and mental health-wise.1 I had even floated the idea of leaving with close friends and family.\nThe exact moment my future PhD went poof was when I spent 15 minutes just to see what my job prospects might look like if I left. In just those few minutes, I found dozens of jobs I wanted that I seemed reasonably qualified for, all of which seemed vastly preferable to another minute in grad school.\nIt struck me that I was getting a PhD as insurance against someday wanting a job for which I needed a PhD.\nI‚Äôm delighted at where my career has taken me‚Ä¶and I‚Äôve yet to run into a job where I needed a PhD. At this point, I‚Äôm pretty sure it isn‚Äôt going to happen. A masters in economics got me my first job after grad school, and as many people will tell you, then it‚Äôs just about job experience.\nAn important caveat for me to add: My identity ‚Äì a cis, straight, white man ‚Äì has almost certainly has made it easier for me to be perceived as competent even without a PhD. I can‚Äôt speak to any other experience because this is the only one I have, but people with marginalized identities may find explicit credentialing more important for opening doors than I have."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#i-was-wrong-that-this-was-the-end-of-learning",
    "href": "posts/2022-09-16-phd-dropout/index.html#i-was-wrong-that-this-was-the-end-of-learning",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "I was wrong that this was the end of learning",
    "text": "I was wrong that this was the end of learning\nI am, and have always been, deeply nerdy.\nLearning new things has always brought me great joy, and my assumption was that an economics PhD program would be the Jedi Temple of learning opportunities.\nI didn‚Äôt find that to be the case. Instead, I found first year economics classes to be a bizarre and terrible mashup of grueling and boring. I was repeatedly assured that it gets better after first year and much better after finishing classes. I didn‚Äôt stay long enough to test that hypothesis.\nBut even in the midst of what felt like the thousandth problem set doing really, really hard 8th grade algebra, I was worried that leaving would mean the end of learning.\nI couldn‚Äôt have been more wrong.\nThat‚Äôs the big secret of graduate school ‚Äî it‚Äôs not a teaching mechanism, it‚Äôs a forcing mechanism. In graduate school you‚Äôre forced to spend long (long, long, long) hours a week researching and learning about something new.\nThat‚Äôs not a bad thing! I believe strongly in having forcing mechanisms to do important, hard things. But rest assured, if you‚Äôre the kind of person who started a PhD and are worried about leaving because you might stop learning, it won‚Äôt be a problem.\nI was right that leaving grad school meant the end of a particular kind of school-based learning. It definitely meant the end of knowing ‚Äì with numeric precision ‚Äì how my learning compared to others. If you, like me, have always been a good student, the end of grades can be the scariest change of all.\nAnd the shape of professional learning is very different from PhD learning.\nPhD learning is extremely deep, but very narrow. You‚Äôll learn a lot about your discipline and sub-discipline and sub-sub-discipline, but the working world allows (and demands) that you take a broader focus.\nFor some people this is a drawback. For me it was a benefit.\nSince I left grad school, I‚Äôve worked at five different organizations in three different fields (not counting my time as a Segway tour guide). I‚Äôve had to spend a lot of time answering emails, doing busywork, and other things that don‚Äôt really promote learning.\nBut I‚Äôve also learned about so many different things, following one to another in a pattern that ‚Äì at least to me ‚Äì feels like a random walk of learning cool shit.\nJust to name a few of the different things I‚Äôve been able to explore intellectually: the workings of the American retirement system, machine learning and predictive modeling, data visualization and dashboarding, the mechanics of bond funding for sports stadiums, political advertising, R, Python, and SQL, how servers and networking work, and business leadership and management.\nSome of these things I could‚Äôve learned in a classroom.\nBut a lot, I couldn‚Äôt. I learned how to operate in an organization ‚Äî how to figure out how to get things done in the face of institutional inertia. I‚Äôve learned how small, medium, and very, very large institutions try to implement changes.\nAll to say ‚Äî I have not stopped learning since I left grad school.\nNot for a minute."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#i-care-that-my-work-matters",
    "href": "posts/2022-09-16-phd-dropout/index.html#i-care-that-my-work-matters",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "I care that my work matters",
    "text": "I care that my work matters\nAn unprovable claim that I nonetheless completely believe: getting a PhD in 2020 is harder and less rewarding than it might‚Äôve been in 1920 or 1970, because the amount of codified prior knowledge is so much greater.\nThis means that you‚Äôve got to learn more to get to cool new stuff and that specialization is narrower and contributions are smaller.2\nBy the time you get to a dissertation topic, there are probably only a handful of people who are deep enough to actually care about your topic.\nIn many fields, academic writing involves a relatively small handful of people writing on a topic, citing each other, piling counterargument atop counterargument in successive papers, and devoted to a tiny slice of the field. In fact, there are reasonable estimates that no one ever cites 32% of articles in the Social Sciences. The percentage is higher in the humanities.\nI found the thought that basically no one would care about my work deeply frustrating.\nJust the other day (now several years ago), I had a client say that their hospital system was already looking into opening new clinics based on market research my team had done. I thought that was cool, and a great change of pace compared to dreaming of a few people someday reading the tome I‚Äôd written."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#i-work-best-on-teams",
    "href": "posts/2022-09-16-phd-dropout/index.html#i-work-best-on-teams",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "I work best on teams",
    "text": "I work best on teams\nMany people work best in teams. I certainly do.\nMy greatest joy in grad school was the little study group I managed to find. By the end of the year, each of us was capable of high-fidelity recreations of the others‚Äô Chewbacca-like cries of anguish when a proof turned out to be faulty.\nBut in the years since I left, that group scattered. After first year, people split into different specialty classes in second year and then into different specialties and eventually to writing their dissertations solo.\nMost academics are teams of one, and though many papers are co-authored these days, dissertations generally are not.\nI definitely do my best work getting to talk through a problem with my peers ‚Äî I‚Äôm an out-loud thinker. Though it‚Äôs mostly supposition on my part, I think I would‚Äôve really struggled with how much I could bring to my advisor to discuss and how much I just had to puzzle out on my own.\nOn the contrary, I‚Äôve never worked on anything but a team since leaving grad school.\nMost non-academic teams are highly multidisciplinary, because they have to be. While you might be the only person with your particular skills on the team, you‚Äôll probably be in league with a half-dozen other people who add important domain knowledge, technical know-how, or management skills to the team."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#i-love-teaching-coaching-and-mentoring",
    "href": "posts/2022-09-16-phd-dropout/index.html#i-love-teaching-coaching-and-mentoring",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "I love teaching, coaching, and mentoring",
    "text": "I love teaching, coaching, and mentoring\nI knew I didn‚Äôt want to be a research academic, but I did love teaching.\nI thought, ‚Äúmaybe I do want to become a college professor, the teaching kind.‚Äù I‚Äôd had some professors in college who were such astoundingly good teachers that I thought maybe I wanted to do the same (looking at you, Mary-Jane Rubenstein and Gil Skillman).\nI thought that staying in an academic setting was my best opportunity to get to keep teaching and mentoring. I had no real understanding that teaching and mentoring could happen in a professional context.3\n\nAnd I had some REALLY bad teaching in grad school.\nThe most gobsmacking moment of my PhD program was when our professor told us that everyone had missed a question on an exam ‚Äì and that the problem was our exam preparation.\nEvery single student had missed a question on his exam.\nEvery single bright-eyed PhD first year and overachieving Masters student had missed a question ‚Äî and that it was our fault for not studying right.\nAt the risk of killing the point by over-explaining it, every entering PhD students has a little bit of Chidi from The Good Place in them ‚Äî a little entranced by a future of offices brimming with books they‚Äôve actually ready, long walks full of deep discussion with brilliant coworkers, and dreams of discovering something new about the world every day.\nThe notion that he had taught us the material and that we‚Äôd just studied wrong was so ridiculous that I am still shocked it was said aloud a decade on.\n\nI won‚Äôt say that I‚Äôve never encountered bad or toxic management since leaving grad school. I have.\nBut if you like coaching, teaching, and mentoring, there are so many incredible opportunities to do that outside academia.\nAnd from what I hear, teaching in academia ain‚Äôt so hot these days.\nIt‚Äôs true, I‚Äôve never gotten to didactically lecture a class, cloud of chalk blooming as I deliver a brilliant lecture. But I get to develop deep relationships with my colleagues and occasionally help them figure out a thing or two about a topic I really like.\nIt has been wonderful. In fact, I like it so much that after a few years of technical work I‚Äôm now full-time ‚Äúin management‚Äù. I love it. So much so that I started and finished an essay about my first year managing a data science team in the time it took me just to polish this one."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#maybe-you-shouldnt-drop-out-but-you-should-think-about-it",
    "href": "posts/2022-09-16-phd-dropout/index.html#maybe-you-shouldnt-drop-out-but-you-should-think-about-it",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "Maybe you shouldn‚Äôt drop out, but you should think about it",
    "text": "Maybe you shouldn‚Äôt drop out, but you should think about it\nIf you‚Äôre getting a PhD in the natural or social sciences, you probably have a good-paying job waiting for you at the end of grad school. It might seem like grad school is a no-risk path. You‚Äôre probably right.\nThere are people who like - or love ‚Äì grad school. You lucked out with an advisor who‚Äôs awesome and friends who you love. In that case, your opportunity cost is low. Yes, you probably could be earning more money by leaving, but life is about so much more than that.\nOn the other hand, if you ‚Äì like me ‚Äì find yourself miserable every single day of grad school, I‚Äôd encourage you to think hard about leaving. There are almost certainly other paths that you can find equally rewarding ‚Äì intellectually, financially, and spiritually.\nI was incredibly lucky. When I raised the idea of leaving with my parents and my girlfriend, they were open to the idea that I should drop out and happy to expend emotional energy talking about it for the nearly six months it took me to decide.\nYou may not be so lucky.\nIf you need a little push, tweet at me. I‚Äôm always happy to tell someone that they, yes they, should drop out."
  },
  {
    "objectID": "posts/2022-09-16-phd-dropout/index.html#footnotes",
    "href": "posts/2022-09-16-phd-dropout/index.html#footnotes",
    "title": "I left a PhD Program, maybe you should too!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI am actually deeply grateful for grad school for 2 reasons. One, I read the book Starting Strength by Mark Rippetoe and started lifting weights. Two, I also did a ton of therapy ‚Äì individual and group ‚Äì at steeply discounted student rates.\nEveryone should drop out of grad school, lift weights, and do therapy. Strong recommend.‚Ü©Ô∏é\nI think rising length to finish PhDs probably supports this hypothesis, although I doubt that‚Äôs the only cause.‚Ü©Ô∏é\nDespite the fact that I had great mentors in my first two bosses before grad school. Thanks Adam Thomas and Scott Winship!\nIt just didn‚Äôt really click that I could do the same and find it rewarding in a teacher-y way.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/2019-11-09-custom-fonts-in-ggplot2/index.html",
    "href": "posts/2019-11-09-custom-fonts-in-ggplot2/index.html",
    "title": "Custom fonts in ggplot2",
    "section": "",
    "text": "A lot of things are great and easy to do in ggplot2‚Ä¶but putting new fonts in can be a pain in the butt. I had to do this last week, so I decided to write down what I did (as much for me as for anyone else).\n\nGet the package extrafont: install.packages('extrafont')\nStart extrafont: library(extrafont)\nImport system fonts to R (this can take a minute): font_import()\nLoad fonts: loadfonts(device = 'win'). If you‚Äôre on a Mac, just loadfonts().\nFonts are loaded!\n\nNow, when you type windowsFonts() in windows or , you‚Äôll get a list of all available fonts:\n$serif\n[1] \"TT Times New Roman\"\n\n$sans\n[1] \"TT Arial\"\n\n$mono\n[1] \"TT Courier New\"\n\n$`Agency FB`\n[1] \"Agency FB\"\n\n$Algerian\n[1] \"Algerian\"\n\n$`Arial Black`\n[1] \"Arial Black\"\n\n$Arial\n[1] \"Arial\"\n...\nNow, when you want to use a font in ggplot, it‚Äôs as easy as calling theme(family = 'Arial').\nNote that if you‚Äôre on a Mac, you won‚Äôt get the default Microsoft Office fonts, so if you‚Äôre trying to convince people that you can switch from Powerpoint by making Excel-like plot styles, you‚Äôll need to add the fonts manually. Luckily, it‚Äôs really easy to do through the font book utility on your Mac (just type Font into spotlight), and this blog post."
  },
  {
    "objectID": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html",
    "href": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html",
    "title": "R Packages for Experts, not Wizards",
    "section": "",
    "text": "I, like so many other R aficionados, love writing R packages for my team. They‚Äôre a great way to get everyone on the same page and to ensure everyone has access to the same resources. But I‚Äôve also (more than once) lovingly crafted an R package only to find that‚Ä¶no one used it.\nI‚Äôd incorrectly thought a bunch of clever R code could solve my team‚Äôs problems. I‚Äôd assumed I, the team‚Äôs R wizard, could go write the perfect package, and return to great acclaim that I‚Äôd fixed everyone‚Äôs woes.\nUnfortunately, my vision of how the package writing process was busted in at least three ways ‚Äì ones that I‚Äôve seen befall other teams and R aficionados. Read on for more."
  },
  {
    "objectID": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#the-wizard-package",
    "href": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#the-wizard-package",
    "title": "R Packages for Experts, not Wizards",
    "section": "The Wizard Package",
    "text": "The Wizard Package\nWhen I wrote my team‚Äôs packages, I was the R wizard on the team ‚Äì and if you‚Äôre reading this, you probably are too. I believed I could go off, write a package, and deliver it from on high a la Moses from Mount Sinai.1\nI‚Äôve come to call the result of this (not so great) pattern the Wizard Package.\nWizard Packages can work. I‚Äôve seen Wizard Packages work when (1) the whole team is clear that a package will solve the problem, (2) the need is can be met by clever R code, and (3) the team is strongly motivated to adopt the package.\nIn my case, none of these conditions held. I wasn‚Äôt riding a wave of enthusiasm for R ‚Äì I was trying to spark it. People weren‚Äôt super motivated to adopt the package, and I couldn‚Äôt really compel them to do so. Worst of all, my R code just wasn‚Äôt solving the keenest problems of my teammates.\nBecause they‚Äôre written by R wizards, Wizard Packages tend to solve R wizard problems. They have clever wrappers for other functions, or convenience functions for advanced R users.\nVery often though, the team‚Äôs needs aren‚Äôt needs that are solved primarily by clever R code ‚Äì the team needs to get their R Markdown report formatted with the right CSS, or calculate correct standard errors from a complicated estimator, or complete those weird database merges that only one person on the team knows how to do.2\nWizard packages convey expertise of a sort, but they often aren‚Äôt adopted because they‚Äôre not expert enough, or aren‚Äôt expert in the right ways."
  },
  {
    "objectID": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#expert-packages",
    "href": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#expert-packages",
    "title": "R Packages for Experts, not Wizards",
    "section": "Expert Packages",
    "text": "Expert Packages\nR packages are a tool to make your team‚Äôs expertise real. By incorporating knowledge from everyone on the team, you can create a package that disseminates that expertise to everyone on the team.\nThere‚Äôs tons of psych research (that I‚Äôm too lazy to actually cite) that one of the best ways to get someone excited about something is to get their help with it.\nMore importantly, there‚Äôs far more to package development than writing R code, so the process really can include everyone, regardless of their level of comfort with R.\nA few ways for folks to help out who might not be the R wizards:\n\nDesigning the API Even folks who are novice R developers probably have a strong sense about what the important features and options are for things like plotting the data.\nDesigning the data model Someone who knows the problem really well probably has the best sense of what the important parts of the data are to keep track of.\nSharing expert knowledge An Expert Package shares expertise across the team. By collecting that knowledge directly, you can incorporate someone‚Äôs data vis, database access, or stats expertise without needing them to write R code.\nWriting documentation, tests, or vignettes Internal packages often include documentation or vignettes that go beyond just explaining the functions themselves, but providing some context on why the function works as it does. People can also provide feedback on whether package tests are meaningful."
  },
  {
    "objectID": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#make-your-packages-experts-not-wizards",
    "href": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#make-your-packages-experts-not-wizards",
    "title": "R Packages for Experts, not Wizards",
    "section": "Make Your Packages Experts, not Wizards",
    "text": "Make Your Packages Experts, not Wizards\nThere‚Äôs a reason that so many stories of Wizards include dark endings, evil omens, and fallen mages. Wizardry is ineherently disconnected from others, and it‚Äôs all about being clever.\nIn the land of R packages, being expert is so much more valuable than being clever ‚Äì doubly so if you can provide expertise and value to others on your team, and the number one way to do that is to get your teammates involved in the package creation process the whole way along."
  },
  {
    "objectID": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#footnotes",
    "href": "posts/2020-12-02-practical-package-patterns/practical-package-patterns.html#footnotes",
    "title": "R Packages for Experts, not Wizards",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf only I‚Äôd remembered the end of that story, where Moses‚Äôs return isn‚Äôt exactly greeted with enthusiasm.‚Ü©Ô∏é\nEvery team has this person, and they are amazing. They also are all-too-often undervalued, because their skills aren‚Äôt as ‚Äútechnical‚Äù as the coding wizards. That is false.‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-2-failures-coming-get-ready/index.html",
    "href": "posts/2019-11-09-upgrading-to-r-2-failures-coming-get-ready/index.html",
    "title": "Upgrading to R #2: Failure‚Äôs Coming, Get Ready!",
    "section": "",
    "text": "As a new manager working with my team of data scientists, upgrading to R meant doing something new, and something hard. As I should‚Äôve known, new + hard is a great recipe for mistakes and failures. I learned a lot from those mistakes - lessons that I couldn‚Äôt have anticipated ahead of time. I‚Äôll share my surprising (and less surprising) things I learned from one particular big failure in this blog post.\nTo start, here‚Äôs an animation I made that describes Alex‚Äôs big goof-up:\nTL;DR: my team was working hard onboarding themselves to R, a mistake made it to a client, and I overreacted with new policies that burned a lot of my team‚Äôs goodwill. Regaining the team‚Äôs trust required eating some words, retracting some policies, and a bunch of all-team discussions to figure out how to do better in the future.\nI should‚Äôve realized that my team‚Äôs goodwill was my most precious resource as a manager. Squandering it wasn‚Äôt a simple matter of not being nice, it (thankfully temporarily) damaged my ability to effectively lead and guide them, and diminished the likelihood that they would do their best work. Here are some things I wish I‚Äôd done ahead of time."
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-2-failures-coming-get-ready/index.html#footnotes",
    "href": "posts/2019-11-09-upgrading-to-r-2-failures-coming-get-ready/index.html#footnotes",
    "title": "Upgrading to R #2: Failure‚Äôs Coming, Get Ready!",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTo be precise, whether the difference between the metric and the threshold was statistically significant, which we didn‚Äôt have the data to compute ourselves.‚Ü©Ô∏é\nEspecially if you‚Äôre the team lead, but really no matter what.‚Ü©Ô∏é\nOr more likely 999 year-olds. Missing data should never have numeric codes, amirite?!?‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html",
    "href": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html",
    "title": "Upgrading to R #1: Excitement >> Skills",
    "section": "",
    "text": "This is the first in a series of posts sharing some insights on upgrading to R. See the index post for others.\nWhether you‚Äôre a team leader trying to take your group to the next level, or an indvidual contributor just trying to infect your org with R love, finding companions is really important.\nFinding the right people will determine whether you end up part of a crack R team or fall back to whatever you‚Äôre doing now. A few factors can ease the way from the desolate R-less place you might live now back to the to the beautiful shire full of free range R code (ok, swear I‚Äôm done with LOTR references).\nHere‚Äôs my totally subjective estimate of some important factors:"
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html#wired-teams-enthusiasm-for-learning-r",
    "href": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html#wired-teams-enthusiasm-for-learning-r",
    "title": "Upgrading to R #1: Excitement >> Skills",
    "section": "Wired: Team‚Äôs enthusiasm for learning R",
    "text": "Wired: Team‚Äôs enthusiasm for learning R\nTired: How much R they already know\nThis is pretty straightforward. By far the most important factor that will determine your team‚Äôs success in transitioning to R is whether they‚Äôre excited about it, and the least important is how much they already know. Learning R just really isn‚Äôt that hard. People who are excited to learn will do it, and those who aren‚Äôt won‚Äôt. It‚Äôs that simple.\nDon‚Äôt know who‚Äôs excited and who‚Äôs not? Ask them! And don‚Äôt just ask whether they‚Äôre excited to learn R. What you really want to know is whether they‚Äôre excited to work on a team that operates with R at its core. Transitioning to R from Excel or Stata has a bunch of potential benefits. Making those benefits real requires a lot more than just writing some code. It‚Äôs a wholesale transition in terms of how the team thinks about work (see future blog posts for more on that)."
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html#lesser-angels",
    "href": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html#lesser-angels",
    "title": "Upgrading to R #1: Excitement >> Skills",
    "section": "Lesser Angels",
    "text": "Lesser Angels\nBeyond enthusiasm, there are a couple of things you can do to make it easier, whether you‚Äôre a team member or the leader.\n\nTidyverse-First Orientation: If you‚Äôve been doing R for a while, you probably know this, but the Tidyverse is AWESOME. It takes the wonderful benefits of R and adds an opinionated take on what code should look like. If you‚Äôre just learning R, start with the Tidyverse. You‚Äôll be glad you did because it‚Äôs magical.1\nRelentless R: Adoping R as a team isn‚Äôt really about a programming langauge, it‚Äôs organizational change. Writing code is easy. Changing hearts, minds, and workflows is hard. There are people who make whole careers out of this stuff. Don‚Äôt get down if it‚Äôs slow going. I‚Äôm skeptical it‚Äôs possible to really transition a team to R in less than 12 months.\nLearning Environment: More on this during Tip #2: Failure, but you‚Äôre trying to make room for people to learn. That means it‚Äôs important to make work a space where they won‚Äôt feel stupid for asking questions or making mistakes. Hopefully this is already true for your workplace‚Ä¶but it‚Äôs especially important if you‚Äôre trying to get your team to do something new and hard like use R. Every workplace is busy, but almost every one can spare an hour a week to do a mini-seminar on R, or to share a package of the week. On my team, we have a show-and-tell every Friday where people share something they‚Äôve learned. Very often, that something is a fun new R thing!\n\nA sub-point to this: If you can, don‚Äôt expect that all this learning will take place outside of work. Some people on your team may have kids or parents they‚Äôre caring for, or other life circumstances that mean that they have less capacity to do out-of-work learning than others. They can still be amazing partners on your journey to R. If you‚Äôre the team lead, try and make space for them to learn. If not, make sure they‚Äôre included on at-work R plans."
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html#footnotes",
    "href": "posts/2019-11-09-upgrading-to-r-1-excitement-skills/index.html#footnotes",
    "title": "Upgrading to R #1: Excitement >> Skills",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis presentation by MilesMcBain on the magic of R packages was FANTASTIC - one of my favorites from RStudio::conf(2019).‚Ü©Ô∏é"
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-rstudio-conf-2019/index.html",
    "href": "posts/2019-11-09-upgrading-to-r-rstudio-conf-2019/index.html",
    "title": "Upgrading to R: RStudio Conf 2019",
    "section": "",
    "text": "A few months ago, I was beyond thrilled to be chosen to give an e-poster at RStudio::conf(2019) on the topic of Upgrading to R. I had such a blast talking to people who are trying to get their team to use more R, sharing some of the lessons I‚Äôve learned over the last few years. My slides are available online, but I‚Äôd also like to share some of the things I spoke with people about, and a little on how I made the slides."
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-rstudio-conf-2019/index.html#upgrading-to-r",
    "href": "posts/2019-11-09-upgrading-to-r-rstudio-conf-2019/index.html#upgrading-to-r",
    "title": "Upgrading to R: RStudio Conf 2019",
    "section": "Upgrading to R",
    "text": "Upgrading to R\nSo many data scientists have had the same experience - walking onto a team where something other than R or Python was the language of choice. Unless that other language was Julia or Scala, this was almost certainly a disappointing moment. But it doesn‚Äôt have a be a reason to run screaming for the hills.\nI‚Äôve now worked on several teams that have successfully transitioned from Excel or Stata to R. These transitions, while sometimes painful, were definitely worth it. Along the way, I learned a few tips and made a lot of mistakes. I decided I‚Äôd try to share as much as possible to help anyone else in the same boat. These lessons will be particularly applicable to someone leading a data science team that‚Äôs transitioning. Some will also be relevant if you‚Äôre a junior staffer trying to push change, but not all.\nIn thinking about the transitions I‚Äôve been part of, here are tips that might‚Äôve helped me if I‚Äôd known them when I started. Links will be added as the posts go live.\nEdit: I seem to have fallen behind on these; maybe I‚Äôll finish someday‚Ä¶"
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-rstudio-conf-2019/index.html#the-tips",
    "href": "posts/2019-11-09-upgrading-to-r-rstudio-conf-2019/index.html#the-tips",
    "title": "Upgrading to R: RStudio Conf 2019",
    "section": "The Tips",
    "text": "The Tips\n\nExcitement &gt;&gt; Skills\nFailure‚Äôs Coming, Get Ready\nYou are the Data Engineer your Team Needs\nIt Takes a Team to Write a Package\nGit: Sometimes the Right Thing isn‚Äôt the Easiest\nHave you met my Friend RMarkdown?\nDon‚Äôt Get Too Excited Just Yet\n\nI plan to write a blog post on each of these, plus an extra about how I put together these tips and the accompanying plots."
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-3-be-the-data-engineer-you-need/index.html",
    "href": "posts/2019-11-09-upgrading-to-r-3-be-the-data-engineer-you-need/index.html",
    "title": "Upgrading to R #3: Be the Data Engineer you Need",
    "section": "",
    "text": "When I first went to data conferences, I assumed that EVERYONE else was pulling data from a supercomputer-backed Spark cluster, immaculately maintained by an army of data engineers. Needless to say, that was not my data infrastructure.\nTo be more succinct, most of the ‚Äúdata infrastructure‚Äù I‚Äôve worked with has just been csv files. And our ETL processes ‚Äì cleaning csv files to output more csv files (or rds).\nBased on my very informal polling of people in the field, this is WAY more common than anyone admits, especially if you‚Äôre on a team that‚Äôs just upgrading to R. As you make that switch, it‚Äôs easy to be discouraged feeling like everyone else is lightyears ahead. The (not so) dirty secret is that they‚Äôre not really.\nIf I had to guess, the modal data scientist/analyst working in industry does ETL across a mixture of flat files and SQL databases. It‚Äôs still relatively rare to find people working on higher-power systems.1\nComing into a new role and discovering that you‚Äôre expected to wrangle a bunch of csv files can be frustrating, especially if you don‚Äôt reall ywant to be a data engineer. But you should. The number one way to be a better data scientist is to become the data engineer you wish you had.\nBeing a great junior data scientist is 75% just knowing the data super well. A junior data scientist who can confidently identify things that just look weird in data is worth approximately 47 XGBoost models and 76 convolutional neural nets.\nA data scientist who combines data science knowledge with expertise on the data‚Äôs provenance and the data-generating process is way more likely to make a good catch or identify a clever new feature for modeling than a better modeler with little understanding of the specifics of the data.\nSo yes, become the data engineer for your data because you need it, but also to make yourself a better data scientist. It won‚Äôt kill you."
  },
  {
    "objectID": "posts/2019-11-09-upgrading-to-r-3-be-the-data-engineer-you-need/index.html#footnotes",
    "href": "posts/2019-11-09-upgrading-to-r-3-be-the-data-engineer-you-need/index.html#footnotes",
    "title": "Upgrading to R #3: Be the Data Engineer you Need",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nOr honetly, use cases that really need those systems. Postgres will get you pretty far.‚Ü©Ô∏é\nDon‚Äôt get scared by ‚Äúan API‚Äù if you‚Äôre not familiar! It just means a bunch of functions so that you can access in a consistent way.‚Ü©Ô∏é"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Alex K Gold",
    "section": "",
    "text": "Alex leads the Solutions Engineering team at RStudio.\nOutside of work, Alex is a life-long martial arts enthusiast (Tang Soo Do, Small Circle Jujitsu, and Tai Chi). He also loves handstands (calisthenics exercise), and is very into home improvement.\n\nCareer Sketch\n\n\n\n\n\n\n\nRStudio Solutions Engineering\n2019 -\n\n\nData Science + Data Science Manager\nAnalyst Institute, Booz Allen Hamilton\n2016 - 2019\n\n\nThink Tank Times II\nBipartisan Policy Center, Brookings Institution\n2013 - 2016\n\n\nGrad School (PhD Dropout/MA)\nDuke University, Economics\n2012 - 2013\n\n\nThink Tank Times I\nBrookings Institution\n2010 - 2012\n\n\nUndergrad (BA)\nWesleyan University, Math + Econ Major\n2006 - 2010"
  },
  {
    "objectID": "speaking.html",
    "href": "speaking.html",
    "title": "Recent Speaking",
    "section": "",
    "text": "Selected slides are available at speakerdeck.\nGenerally, my presentations involve demoing R code, which is available on GitHub."
  }
]